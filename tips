# docker tips
imageはコンテナの元であり、imageからコンテナを起動する
image => container
image_name : tag_name
# image取得方法
docker hubからimage取得
    docker pull image_name
Dockerfileからのイメージ作成
    docker build
docker build option : -no-cache
    一度buildしたimageをDockerfileの変更なしに再びbuildする際はcache(以前builした情報を見て、updateコマンドを記述したとしてもそのコマンドは実行されない)が効く
imageからコンテナの作成
    docker create --name container_name
コンテナ起動
    docker start container_name
DockerHubからイメージ取得後コンテナを作成・起動する
    docker run image_name
# docker-compose command (docker-compose.ymlを参照するコマンド)
docker-compose.ymlに記述した設定からコンテナ起動
    docker-compose up
コンテナ内でコマンド実行
    docker-compose run [container] [command]
コンテナ内docker-compose exec [command]
    execute a command in a running container
    docker-compose up -d --build
        1 create docker image (template of virtual environment) based on image information writen in Dockerfile
        2 make docker container (container including virtual environment to execute using template of virtual environment)
        3 start  docker container 
        up : launch the container
        --build : option to build the image if you already have image, you do not need this option
        -d : run container in background
Dockerを終了＆削除
    docker compose down
# 表示系
実行中のコンテナ表示
    docker ps (=docker container ls)(docker-composeで起動したコンテナの一覧表示：docker-compose ps)
存在しているコンテナ一覧の表示
    docker ps -a
イメージ表示
    docker image ls  (docker image rm image_id：delete image)
# 開発
コンテナへのログイン
    docker exec -it container_ID bash
docker compose exec container_name command
    connect to container and the command in the terminal is executed under environment of container
# git tips
https://github.com/niveawater/MyTask_valikko.git
access_token = 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
add file to commit : git add . 
commit : git commit -m "error"
git push origin [branch_name(main)]

# command in qita
$ docker volume create --name app_postgre
    create volume
$ docker-compose run app rails new . --force --database=postgresql --skip-bundle
    create skelton app
    --force : option for overwriting existing Gemfile
    --database=postgresql : specify the database 
    --skip-bundle : skip bundle (bundle at last)    
http://127.0.0.80/

# error list
・ERROR [internal] load metadata for docker.io/library/ruby:2.7.4 
  => restart vscode and done
・bundle install 
  => docker-compose build before docker-compose run app rails new . --force --database=postgresql --skip-bundle
・ERROR: for app  Cannot start service app: driver failed programming external connectivity on endpoint app (4f240ada17eeb90a31bafb71d060ce8243d27bc63874e1d9ce6fb5de01dd6ef7): Bind for 0.0.0.0:80 failed: port is already allocated
=>restart docker

# add things
rails
必要なgem
・device（ログイン機能）
・bulma-rails（デザイン）
・refile（ファイルのアップロード先を柔軟に設定できる、画像のサムネイルを生成できる）
・refile-mini_magick（refileと同様）
rails generate devise:install
コンテナ内でのインストール
    apt-get install vim
URL確認
    rails routes

 ログイン画面：app/views/devise/sessions/new.html.erb 
 新規登録画面：app/views/devise/registrations/new.html.erb 

ユーザーモデルを作る
    rails g devise:views 
DBを変更
    vi db/migrate/20...
変更を反映
    rails db:migrate
変更を確認
    db/migrate/schema.db


docker image
docker run -it --rm ruby:2.7.4 bash
docker run -it -v $(pwd):/home ruby:2.7.4 localとbind pwdとrubyのhomeをバインド
vi a.rb
cd home
docker ps c t
login to container
docker exec -it container ID bash
ruvy a.rb
apt-get install less

rikuru-to : 

ncm : CentOS 6.7
irb








